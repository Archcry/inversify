#!/usr/bin/env node
"use strict";

const debug = require("debug")("express:server");
const http = require("http");

try {
    const env = require("../env.json");

    startServer(env);
} catch (err) {
    console.log(err);
}

function startServer(env) {
    env.port = normalizePort(env.port);

    const main = new (require("../src/main"))(env);

    main.App.set("port", env.port);

    const server = http.createServer(main.App);

    server.listen(env.port);

    server.on("error", onError);
    server.on("listening", main.onListening.bind(main));
}

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        return val;
    }

    if (port >= 0) {
        return port;
    }

    return false;
}

function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            console.error(bind + " requires elevated privileges");
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(bind + " is already in use");
            process.exit(1);
            break;
        default:
            throw error;
    }
}